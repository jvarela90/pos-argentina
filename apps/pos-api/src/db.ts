import pg from 'pg';

const { Pool } = pg;

// Configuraci√≥n del pool de conexiones
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' 
    ? { rejectUnauthorized: false } 
    : false,
  max: 20, // m√°ximo de conexiones en el pool
  idleTimeoutMillis: 30000, // tiempo de inactividad antes de cerrar conexi√≥n
  connectionTimeoutMillis: 2000, // tiempo de espera para nueva conexi√≥n
});

// Funci√≥n helper para consultas
export const query = (text: string, params?: any[]) => {
  console.log('üîç Executing query:', text, params ? `with params: ${JSON.stringify(params)}` : '');
  return pool.query(text, params);
};

// Funci√≥n helper para transacciones
export const transaction = async (callback: (client: pg.PoolClient) => Promise<any>) => {
  const client = await pool.connect();
  try {
    await client.query('BEGIN');
    const result = await callback(client);
    await client.query('COMMIT');
    return result;
  } catch (error) {
    await client.query('ROLLBACK');
    throw error;
  } finally {
    client.release();
  }
};

// Eventos del pool
pool.on('connect', (client) => {
  console.log('üóÑÔ∏è  New client connected to PostgreSQL database');
});

pool.on('error', (err, client) => {
  console.error('üö® Unexpected error on idle client', err);
});

pool.on('acquire', (client) => {
  console.log('üì• Client acquired from pool');
});

pool.on('remove', (client) => {
  console.log('üì§ Client removed from pool');
});

// Funci√≥n para verificar la conexi√≥n
export const testConnection = async () => {
  try {
    const result = await query('SELECT NOW() as now, version() as version');
    console.log('‚úÖ Database connection successful:', result.rows[0]);
    return true;
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    return false;
  }
};

// Funci√≥n para cerrar el pool (√∫til para tests o shutdown)
export const closePool = () => {
  return pool.end();
};

// Funci√≥n helper para formatear resultados
export const formatDatabaseResult = (result: pg.QueryResult) => ({
  success: true,
  data: result.rows,
  total: result.rowCount || 0
});

// Funci√≥n helper para manejar errores de base de datos
export const handleDatabaseError = (error: any) => {
  console.error('Database error:', error);
  
  // C√≥digos de error espec√≠ficos de PostgreSQL
  switch (error.code) {
    case '23505': // unique_violation
      return { success: false, error: 'Ya existe un registro con esos datos √∫nicos' };
    case '23503': // foreign_key_violation
      return { success: false, error: 'Referencia inv√°lida a otro registro' };
    case '23502': // not_null_violation
      return { success: false, error: 'Campo requerido faltante' };
    case '23514': // check_violation
      return { success: false, error: 'Datos no v√°lidos seg√∫n las reglas definidas' };
    default:
      return { success: false, error: 'Error interno de base de datos' };
  }
};

export default pool;