version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: pos_argentina
      POSTGRES_USER: pos_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - pos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pos_user -d pos_argentina"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para cache y sesiones
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - pos_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: postgresql://pos_user:${POSTGRES_PASSWORD}@postgres:5432/pos_argentina
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: https://${DOMAIN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pos_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Terminal PWA
  terminal:
    build:
      context: .
      dockerfile: docker/terminal/Dockerfile
      args:
        VITE_API_URL: https://api.${DOMAIN}
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - pos_network

  # Panel de Administración
  admin:
    build:
      context: .
      dockerfile: docker/admin/Dockerfile
      args:
        VITE_API_URL: https://api.${DOMAIN}
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - pos_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - certbot_data:/var/www/certbot
    depends_on:
      - terminal
      - admin
      - api
    networks:
      - pos_network

  # Certbot para SSL
  certbot:
    image: certbot/certbot
    volumes:
      - certbot_data:/var/www/certbot
      - ./docker/nginx/ssl:/etc/letsencrypt
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} -d api.${DOMAIN} -d admin.${DOMAIN}

  # Backup automático
  backup:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      PGUSER: pos_user
      PGPASSWORD: ${POSTGRES_PASSWORD}
      PGHOST: postgres
      PGDATABASE: pos_argentina
    volumes:
      - backup_data:/backup
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - pos_network
    command: |
      sh -c '
        chmod +x /backup.sh
        echo "0 2 * * * /backup.sh" | crontab -
        crond -f
      '

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backup_data:
    driver: local
  certbot_data:
    driver: local

networks:
  pos_network:
    driver: bridge